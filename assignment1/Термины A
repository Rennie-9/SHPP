abstract class -----------------------------------------------------------

Abstract class в Java - это класс, который может содержать методы и свойства, но не может быть инстанцирован напрямую. 
Это означает, что вы не можете создать объект на основе абстрактного класса. 
Абстрактные классы используются для определения общих свойств и поведения, которые могут быть расширены и реализованы в классах-наследниках.

Синтаксис определения абстрактного класса в Java:

```java
abstract class MyAbstractClass {
    // методы и свойства абстрактного класса
}
```

В абстрактном классе можно определить абстрактные методы, которые не имеют реализации. Эти методы должны быть реализованы в классах-наследниках. 
Абстрактный метод определяется с ключевым словом `abstract` перед именем метода.

```java
abstract class MyAbstractClass {
    public abstract void myAbstractMethod();
}
```

Класс-наследник, который расширяет абстрактный класс, должен предоставить реализацию всех абстрактных методов. 
Если класс-наследник не предоставляет реализацию абстрактного метода, он также должен быть объявлен абстрактным.

```java
class MyConcreteClass extends MyAbstractClass {
    @Override
    public void myAbstractMethod() {
        // реализация метода
    }
}
```

Абстрактные классы и абстрактные методы позволяют создавать более гибкие и расширяемые иерархии классов, позволяя наследовать общие свойства и поведения, 
а также предоставляя возможность расширения и дополнительной специализации.

accessibleContext -------------------------------------------------

AccessibleContext в Java - это класс, который предоставляет интерфейс для доступа к информации о пользовательском интерфейсе компонента Swing или AWT. 
Он позволяет компонентам предоставлять информацию о себе для инструментов доступа или других программ, 
которые могут использовать эту информацию для отображения или взаимодействия с компонентами.

AccessibleContext обеспечивает следующие возможности:

1. Описание компонента: AccessibleContext позволяет компонентам предоставлять описание своего состояния и свойств. 
Это может быть использованно для отображения информации о компоненте для пользователей с ограниченными возможностями или для интеграции с другими программами.

2. Управление фокусом: AccessibleContext позволяет управлять фокусом на компоненте, что может быть полезно для инструментов доступа, 
которые ориентированы на пользователей с ограниченными возможностями.

3. Оповещение об изменениях: AccessibleContext позволяет компонентам оповещать другие программы о своих изменениях, 
таких как изменения состояния, размера или внешнего вида.

Существует множество методов и свойств AccessibleContext, которые обеспечивают эти возможности. 
Например, `getAccessibleName()` возвращает описание компонента, `requestFocus()` управляет фокусом на компоненте, 
а `firePropertyChange()` оповещает другие программы об изменениях в свойствах компонента.

AccessibleContext используется для создания более доступных и инклюзивных приложений, 
позволяя пользователям с ограниченными возможностями взаимодействовать с компонентами пользовательского интерфейса.

actionPerformed(ActionEvent actionEvent); (void) -----------------------------------
`actionPerformed()` - это метод, который используется в обработчиках событий в Java для обработки событий от пользовательского интерфейса, 
таких как нажатие кнопки или выбор пункта меню.

Обычно `actionPerformed()` используется в классах, реализующих интерфейс `ActionListener`. Этот интерфейс содержит один метод, `actionPerformed()`, 
который должен быть реализован в классе, реализующем интерфейс.

Синтаксис реализации `actionPerformed()`:

```java
public class MyActionListener implements ActionListener {
    @Override
    public void actionPerformed(ActionEvent e) {
        // код, который будет выполнен при наступлении события
    }
}
```

В скобках метода `actionPerformed()` указан параметр `ActionEvent e`. Это объект, который содержит информацию о событии, такую как компонент, 
который вызвал событие, и другие связанные данные.

При наступлении события, например, нажатие кнопки, объект `ActionEvent` создается и передается в метод `actionPerformed()`. 
Внутри метода вы можете обработать событие, например, выполнить определенные действия или изменить состояние компонента.

Важно отметить, что `actionPerformed()` должен быть реализован в классе, который реализует `ActionListener`, 
и его следует назначить в качестве обработчика события для соответствующего компонента пользовательского интерфейса.

`actionPerformed(ActionEvent actionEvent)` - это сигнатура метода `actionPerformed()`, которая указывает на то, 
что метод принимает один параметр типа `ActionEvent` и возвращает значение типа `void`.

Синтаксис сигнатуры метода в Java состоит из модификаторов доступа (например, `public`), возвращаемого типа (в данном случае `void`), 
имени метода (`actionPerformed`) и списка параметров (`ActionEvent actionEvent`).

В данном случае метод `actionPerformed()` определен для обработки событий пользовательского интерфейса и 
принимает объект `ActionEvent` в качестве параметра. Этот объект содержит информацию о событии, такую как компонент, 
который вызвал событие, и другие связанные данные.

`void` в возвращаемом типе метода означает, что метод не возвращает никакого значения. 
Это означает, что метод не должен содержать инструкции `return` с возвращаемым значением.

Внутри метода `actionPerformed()` вы можете обрабатывать событие, например, выполнять определенные действия или изменять состояние компонента.

Важно отметить, что метод `actionPerformed()` должен быть реализован в классе, который реализует `ActionListener`, 
и его следует назначить в качестве обработчика события для соответствующего компонента пользовательского интерфейса.

